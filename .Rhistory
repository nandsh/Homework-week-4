return((v-mean(x)^2));
}
sos(2,3,4)
sos <-function(v)
{
return(sum(v-mean(x)^2));
}
sos(2,3,4)
sos(c(2,3,4))
sos <-function(v)
{
return(sum(v-mean(v)^2));
}
sos(c(2,3,4))
sos <-function(v)
{
return(sum(v-mean(v))^2);
}
sos(c(2,3,4))
sos <-function(v)
{
return(sum(v-mean(v)^2));
}
sos(c(2,3,4))
sos <-function(v)
{
return(sum((v-mean(v))^2));
}
sos(c(2,3,4))
> ss3 <- function(x) {
sum(x^2) - (sum(x))^2/length(x)
}
ss3 <- function(x){sum(x^2) - (sum(x))^2/length(x)}
ss3(122334)
ss3(c(1,23,34,45,56,56)
)
var(c(1,23,34,45,56,56))
plot(c(0, 50), c(0, 15), type = "n", xlab = "Sample size", ylab = "Variance")
search()
environment(seq)
environment(ss3)
environment(arrows)
l<-list(c("A","B"),c("C","D"))
l
l[1]
l[1][2]
l[1](2)
l[2
]
l[1].(1)
l[[1]]
l[[1]].[2]
l[1](1)
l[[c(2,3)]]
l[[c(2,2)]]
l[c(2,2)]
l[c(2)]
l[c(1,2)]
names(l)<-c("elementOne","elementTwo")
l
barplot(c(12,23,34,45,56))
barplot(c(12,23,34,45,56),xlab = scores)
barplot(c(12,23,34,45,56),xlab = "scores")
barplot(c(12,23,34,45,56),xlab = "scores",ylab = "people")
barplot(c(12,23,34,45,56),xlab = "scores",ylab = "people",space =0)
barplot(c(12,23,34,45,56),xlab = "scores",ylab = "people",space =0,names.arg = c(a,b))
barplot(c(12,23,34,45,56),xlab = "scores",ylab = "people",space =0,names.arg = c("a","b"))
barplot(c(12,23,34,45,56),xlab = "scores",ylab = "people",space =0,names.arg = c("a","b","c","d","e"))
barplot(c(12,23,34,45,56),xlab = "scores",ylab = "people",space =0,names.arg = c("a","b","c","d","e"),col = "red")
barplot(c(12,23,34,45,56),xlab = "scores",ylab = "people",space =0,names.arg = c("a","b","c","d","e"),col = "yellow")
barplot(c(12,23,34,45,56),xlab = "scores",ylab = "people",space =0,names.arg = c("a","b","c","d","e"),col
)
pbinom(q=3,size=8,prob=1/6)
pbinom(c(1,2,3,4,5,6,7,8),size=8,prob=1/6)
X<-pbinom(c(1,2,3,4,5,6,7,8),size=8,prob=1/6)
barplot(X,xlab = ("x"),ylab = ("P(X<=x)"), names.arg = c(1,2,3,4,5,6,7,8))
xvals <- seq(0,10,length=200)
plot(xvals,dexp(x=xvals,rate=1.65),xlim=c(0,8),ylim=c(0,1.65))
plot(xvals,dexp(x=xvals,rate=1.65),xlim=c(0,8),ylim=c(0,1.65),type="l")
plot(xvals,dexp(x=xvals,rate=1.65),xlim=c(0,8),ylim=c(0,1.65),type = "p")
plot(xvals,dexp(x=xvals,rate=1.65),xlim=c(0,8),ylim=c(0,1.65),type = "o")
plot(xvals,dexp(x=xvals,rate=1.65),xlim=c(0,8),ylim=c(0,1.65),type = "s")
plot(xvals,dexp(x=xvals,rate=1.65),xlim=c(0,8),ylim=c(0,1.65),type = "S")
plot(xvals,dexp(x=xvals,rate=1.65),xlim=c(0,8),ylim=c(0,1.65),type="l",
xlab="x",ylab="f(x)")
plot(xvals,dexp(x=xvals,rate=2.65),xlim=c(0,8),ylim=c(0,1.65),type="p",
xlab="x",ylab="f(x)")
plot(xvals,dexp(x=xvals,rate=4.65),xlim=c(0,8),ylim=c(0,1.65),type="p",
xlab="x",ylab="f(x)")
plot(xvals,dexp(x=xvals,rate=1.65),xlim=c(0,8),ylim=c(0,1.65),type="p",
xlab="x",ylab="f(x)")
plot(xvals,dexp(x=xvals,rate=.65),xlim=c(0,8),ylim=c(0,1.65),type="p",
xlab="x",ylab="f(x)")
line(xvals,dexp(x=xvals,rate=1))
lines(xvals,dexp(x=xvals,rate=1))
lines(xvals,dexp(x=xvals,rate=1),lty=2)
lines(xvals,dexp(x=xvals,rate=0.4),lty=3)
lines(xvals,dexp(x=xvals,rate=0.4),lty=4)
abline(v=0,col="gray")
abline(v=0,col="blue")
var(c(12,3,23,34,45))
mySEM<-function(x){}
mySEM<-function(x){
return sqrt(var(x)/length(x))}
return sqrt(var(x)/length(x));}
mySEM<-function(x){
mySEM<-function(x){
}
sqrt(16)
}
sqrt(16)
mySEM<-function(x){
return(sqrt(var(x)/length(x)))}
mySEM(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 25, 50, 100, 200, 1000))
set.seed(1)
x<- rnorm(10000,0,1)
hist(x)
x<- rnorm(10000,0,4)
hist(x)
> set <- NULL  # sets up a dummy variable to hold our 10000 simulations
> n <- 15
>
x <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
for (i in 1:10000) { set[i] <- mean(sample(x, n, replace = TRUE))}
n<-15
for (i in 1:10000) { set[i] <- mean(sample(x, n, replace = TRUE))}
set <- NULL
for (i in 1:10000) { set[i] <- mean(sample(x, n, replace = TRUE))}
quantile(set, c(0.025, 0.975))
for (i in 1:10000) { set[i] <- mean(sample(x, 50, replace = TRUE))}
quantile(set, c(0.025, 0.975))
for (i in 1:10000) { set[i] <- mean(sample(x, 500, replace = TRUE))}
quantile(set, c(0.025, 0.975))
install.packages("manipulate")
> library(manipulate)
> outcomes <- c(1, 2, 3, 4, 5, 6)
> manipulate(hist(sample(outcomes, n, replace = TRUE), breaks = c(0.5, 1.5, 2.5,
+     3.5, 4.5, 5.5, 6.5), probability = TRUE, main = paste("Histogram of Outcomes of ",
+     n, " Die Rolls", sep = ""), xlab = "roll", ylab = "probability"), n = slider(0,
+     10000, initial = 100, s> library(manipulate)
> outcomes <- c(1, 2, 3, 4, 5, 6)
> manipulate(hist(sample(outcomes, n, replace = TRUE), breaks = c(0.5, 1.5, 2.5,
+     3.5, 4.5, 5.5, 6.5), probability = TRUE, main = paste("Histogram of Outcomes of ",
+     n, " Die Rolls", sep = ""), xlab = "roll", ylab = "probability"), n = slider(0,
+     10000, initial = 100, step = 100)tep = 100))
library(manipulate)
outcomes <- c(1, 2, 3, 4, 5, 6)
manipulate(hist(sample(outcomes, n, replace = TRUE), breaks = c(0.5, 1.5, 2.5,
3.5, 4.5, 5.5, 6.5), probability = TRUE, main = paste("Histogram of Outcomes of ",
n, " Die Rolls", sep = ""), xlab = "roll", ylab = "probability"), n = slider(0,
10000, initial = 100, step = 100))
myroll<-function(x){
for(i=1;i<=x;i++){sample(outcomes,1,replace = TRUE))
myroll<-function(x){
for(i=1;i<=x;i++){
roll <- function(x) {
sample(1:6, x, replace = TRUE)
}
roll(20)
roll(20) + roll(20)
two_dice <- roll(2000) + roll(2000)
hist(two_dice, breaks = c(1.5:12.5), probability = TRUE, main = "Rolling Two Dice",
xlab = "sum of rolls", ylab = "probability")
library(ggplot2)
a <- 2
b <- 1
K <- 2
x <- seq(from= 0, to=1, by = 0.025)
fx <- K*x^(a-1)*(1-x)^(b-1)
lower_x <- seq(from=-0.25, to=0, by= 0.025) # add some values of x less than zero
upper_x <- seq(from=1, to=1.25, by= 0.025) # add some values of x greater than one
lower_fx <- rep(0,11) # add fx=0 values to x<0
upper_fx <- rep(0,11) # add fx=0 values to x>1
x <- c(lower_x,x,upper_x) # paste xs together
fx <- c(lower_fx,fx,upper_fx) # paste fxs together
d <- as.data.frame(cbind(x,fx))
p <- ggplot(data = d)
p
d
p <- ggplot(data = d,aes(x=x, y=fx)))
p <- ggplot(data = d,aes(x=x, y=fx))
p
p <- ggplot(data = d,aes(x=x, y=fx))+ xlab("x") + ylab("f(x)")
p
p <- ggplot(data = d,aes(x=x, y=fx))+ xlab("x") + ylab("f(x)") + geom_line()
p
?:ggplot()
?ggplot()
?manipulate
?GeomPolygon
ppois(q=8,lambda=3.22)
ppois(q=8,lambda=4)
barplot(ppois(q=0:30,lambda=3.22),ylim=0:1,space=0,
names.arg=0:30,ylab="Pr(X>=x)",xlab="x")
barplot(ppois(q=0:10,lambda=3.22),ylim=0:1,space=0,
names.arg=0:30,ylab="Pr(X>=x)",xlab="x")
barplot(ppois(q=0:10,lambda=3.22),ylim=0:1,space=0,
names.arg=0:10,ylab="Pr(X>=x)",xlab="x")
barplot(1-ppois(q=0:10,lambda=3.22),ylim=0:1,space=0,
names.arg=0:10,ylab="Pr(X>=x)",xlab="x")
1- ppois(q=8,lambda=15)
?hist
#Plot A histogram of 104 randomly simulated samples
mean(sample(0:30,140,replace = TRUE))
hist(sample(0:30,104,replace = TRUE), freq = FALSE, col = "grey", main = "Plot-A Probability dist. of 104 simulated results", xlab = "Number of Titi monkey calls", ylab = "Probability", xlim = c(0,30), ylim = c(0,.1))
# Plot B histogram of 104 randomly selected variates from Poisson distribution
hist(rpois(n=104,lambda=15), freq = FALSE, col = "grey", main = "PlotB- Probability dist. of 104 simulated results", xlab = "Number of Titi monkey calls", ylab = "Probability", xlim = c(0,30), ylim = c(0,.1))
?hist
sqrt(var(x))
?var
require(stats)
?sd
a<-4
b<-8
x<-seq(from = a, to = b, by = 1)
x
x<-seq(from = a, to = b, by = .01)
x
fx <-dunif(x,min = a,max = b)
plot(x,fx)
x<-seq(from = a-(b-a), to = b+(b-a), by = .01)
fx <-dunif(x,min = a,max = b)
plot(x,fx)
?plot
plot(x,fx,type = "p")
?plot
plot(x,fx,type = "l")
?plot
plot(x,fx,type = "h")
?plot
plot(x,fx,type = "l",asp = 2)
plot(x,fx,type = "l",asp = .5)
plot(x,fx,type = "l",asp = 10)
?plot
runif(10000,min = 6, max = 8)
x <- runif(10000,min = 6, max = 8)
mean(x)
var(x)
1/3
mu<-4
sigma<-1.5
?curve
curve(dnorm(x, mu, sigma), mu - 4 * sigma, mu + 4 * sigma, main = "Normal Curve", xlab = "x", ylab = "f(x)")
curve(dnorm(a, mu, sigma), mu - 4 * sigma, mu + 4 * sigma, main = "Normal Curve", xlab = "x", ylab = "f(x)")
sigma<-3
curve(dnorm(x, mu, sigma), mu - 4 * sigma, mu + 4 * sigma, main = "Normal Curve", xlab = "x", ylab = "f(x)")
curve(dnorm(10, mu, sigma), mu - 4 * sigma, mu + 4 * sigma, main = "Normal Curve", xlab = "x", ylab = "f(x)")
curve(dnorm(x, 10, sigma), mu - 4 * sigma, mu + 4 * sigma, main = "Normal Curve", xlab = "x", ylab = "f(x)")
?polygon
manipulate(plot(seq(from = (mu - 4 * sigma), to = (mu + 4 * sigma), length.out = 1000), dnorm(seq(from = (mu - 4 * sigma), to = (mu + 4 * sigma), length.out = 1000), mean = mu, sd = sigma), type = "l", xlim = c(mu - 4 * sigma, mu + 4 * sigma), xlab = "x", ylab = "f(x)", main = "Normal Probability Density Function") + polygon(rbind(c(mu - nsigma * sigma, 0), cbind(seq(from = (mu - nsigma *  sigma), to = (mu + nsigma * sigma), length.out = 1000), dnorm(seq(from = (mu - nsigma * sigma), to = (mu + nsigma * sigma), length.out = 1000), mean = mu, sd = sigma)), c(mu + nsigma * sigma, 0)), border = NA, col = "salmon") + abline(v = mu, col = "blue") + abline(h = 0) + abline(v = c(mu - nsigma * sigma, mu + nsigma * sigma), col = "salmon"), mu = slider(-10, 10, initial = 0,  step = 0.25), sigma = slider(0.25, 4, initial = 1, step = 0.25), nsigma = slider(0, 4, initial = 0, step = 0.25))
manipulate(plot(seq(from = (mu - 4 * sigma), to = (mu + 4 * sigma), length.out = 1000), dnorm(seq(from = (mu - 4 * sigma), to = (mu + 4 * sigma), length.out = 1000), mean = mu, sd = sigma), type = "l", xlim = c(mu - 4 * sigma, mu + 4 * sigma), xlab = "x", ylab = "f(x)", main = "Normal Probability Density Function") + polygon(rbind(c(mu - nsigma * sigma, 0), cbind(seq(from = (mu - nsigma *  sigma), to = (mu + nsigma * sigma), length.out = 1000), dnorm(seq(from = (mu - nsigma * sigma), to = (mu + nsigma * sigma), length.out = 1000), mean = mu, sd = sigma)), c(mu + nsigma * sigma, 0)), border = NA, col = "salmon") + abline(v = mu, col = "blue") + abline(h = 0) + abline(v = c(mu - nsigma * sigma, mu + nsigma * sigma), col = "salmon"), mu = slider(-10, 10, initial = 0,  step = 0.25), sigma = slider(0.25, 4, initial = 1, step = 0.25), nsigma = slider(0, 4, initial = 0, step = 0.25))
pnorm(seq(from = (mu - 6 * sigma), to = (mu + 6 * sigma), length.out = 1000)
)
pnorm(seq(from = (mu - 6 * sigma), to = (mu + 6 * sigma))
)
?pnorm
?length
?plot
xvals <- seq(-4,4,length=50)
xvals <- seq(-4,4,length.out =50)
xvals <- seq(-4,4,length.out=50)
xvals
xvals <- seq(-4,4,length.out = 50)
xvals <- seq(-4,4,length = 50)
xvals
#File selection
f <- file.choose()
d <- read.csv(f, sep=",", header=TRUE)
#Height
#Age
#Number of Zombies Killed
#Years of Education
d
head(d,1)
head(d,4)
d(height)
d["height"]
sum(d[height])
sum(d["height"])
sum(d["height"])/length(d)
sum(d["height"])
length(d)
nrow(d)
x<-[c(1:10),c(2:20)]
x<-(c(1:10),c(2:20))
mydata <- data.frame(person=c("a","b","c"),age=c(10,20,30))
mydata
sum(mydata("age"))
sum(mydata["age"])
?seed
?set.seed
x <- rnorm(1e+06, 25, 5)
mean(x)
sigma <- sqrt(sum((x-mean(x))^2)/length(x))
sigma
for(i:1 to 100){}
for (i in 1:100) {
s[i]=sample(x,5,replace = FALSE)
}
s<-NULL
for (i in 1:100) {
s[i]=sample(x,5,replace = FALSE)
}
for (i in 1:100) {
s[[i]]=sample(x,5,replace = FALSE)
}
for (i in 1:100) {
s[[i]]<-sample(x,5,replace = FALSE)
}
for (i in 1:100) {
s[[i]]<-sample(x, size = 5,replace = FALSE)
}
for (i in 1:100) {
s[i]<-sample(x, size = 5,replace = FALSE)
}
warnings()
for (i in 1:1000) {
s[i]<-sample(x, size = 5,replace = FALSE)
}
head(s)
head(x)
legend(x)
length(x)
k <- 1000  # number of samples
n <- 5  # size of each sample
s <- NULL  # dummy variable to hold each sample
for (i in 1:k) {
s[[i]] <- sample(x, size = n, replace = FALSE)
}
head(s)
for (i in 1:1000) {
s[[i]] <- sample(x,size = 5, replace = FALSE)
}
for (i in 1:10) {
s[[i]] <- sample(x,size = 5, replace = FALSE)
}
for (i in 1:10) {
s[i] <- sample(x,size = 5, replace = FALSE)
}
for (i in 1:1000) {
s[[i] <- sample(x,size = 5, replace = FALSE)
for (i in 1:1000) {
s[[i]] <- sample(x,size = 5, replace = FALSE)
}
mean(s[[1]])
for(i in 1:1000){}
for(i in 1:1000){
m[i] <- mean(s[[i]])
}
m <- NULL
for(i in 1:1000){
m[i] <- mean(s[[i]])
}
head(m)
zombieFile <- file.choose()
zombieData <- read.csv(f, sep=",", header=TRUE)
#Defining generic mean and standard deviation functions
mean_pop <- function(ranVar){return (sum(zombieData[ranVar])/nrow(zombieData))}
sd_pop <- function(ranVar){return (sqrt(sum((zombieData[ranVar] - mean_pop[ranVar])^2))/nrow(zombieData))}
#Height
mean_height <- mean_pop("height")
sd_height <- sd_pop("height")
mean_pop <- function(ranVar){return (sum(zombieData[ranVar])/nrow(zombieData))}
sd_pop <- function(ranVar){return (sqrt(sum((zombieData[ranVar] - mean_pop(ranVar)^2))/nrow(zombieData))}
mean_pop("Height")
mean_pop("height")
sd_pop <- function(ranVar){return (sqrt(sum((zombieData[ranVar] - mean_pop(ranVar)^2))/nrow(zombieData)))}
mean_height <- mean_pop("height")
sd_height <- sd_pop("height")
sd_height
sqrt(sum((zombieData["height"] - mean_pop("height")^2))/nrow(zombieData))
sqrt(sum((zombieData["height"] - mean_pop("height"))^2)/nrow(zombieData))
sd_pop <- function(ranVar){return (sqrt(sum((zombieData[ranVar] - mean_pop(ranVar))^2)/nrow(zombieData)))}
?file.choose
?data.frame
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Desktop/notWork/School/RWorkingDirectory/Homework-week-4")
?ggplot
ggplot(zombieData$gender=="Female")
femaleZombieData <- zombieData$gender=="Female"
femaleZombieData
femaleZombieData <- zombieData[zombieData$gender=="Female",]
femaleZombieData
head(femaleZombieData)
ggplot(femaleZombieData)
ggplot(femaleZombieData,aes(femaleZombieData$height,femaleZombieData$first_name))
?ggplot
df <- data.frame(gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30))
ds <- plyr::ddply(df, "gp", plyr::summarise, mean = mean(y), sd = sd(y))
ds
gp
ggplot(df, aes(x = gp, y = y))
?ggplot
ggplot(df, aes(x = gp, y = y)) +
geom_point() +
geom_point(data = ds, aes(y = mean),
colour = 'red', size = 3)
?ggplot
df
?ddply
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
dfx
head(dfx)
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
plyr::ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
plyr::ddply(dfx, ("group", "sex"), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
ddply(dfx, .("group","sex"), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
plyr::ddply(dfx, .("group","sex"), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
plyr::ddply(dfx, ("group","sex"), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
require(plyr)
ddply(dfx, .(group,sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
ddply(zombiesData,summarise, mean = mean_pop("height"),sd = sd_pop("height"))
#File selection
zombieData <- read.csv("zombies.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
#Defining generic mean and standard deviation functions
mean_pop <- function(ranVar){return (sum(zombieData[ranVar])/nrow(zombieData))}
sd_pop <- function(ranVar){return (sqrt(sum((zombieData[ranVar] - mean_pop(ranVar))^2)/nrow(zombieData)))}
ddply(zombiesData,summarise, mean = mean_pop("height"),sd = sd_pop("height"))
ddply(zombieData,summarise, mean = mean_pop("height"),sd = sd_pop("height"))
ddply(zombieData,.group(),summarise, mean = mean_pop("height"),sd = sd_pop("height"))
?ggplot
ddply(zombieData,"gp",summarise, mean = mean_pop("height"),sd = sd_pop("height"))
ddply(zombieData,"gender",summarise, mean = mean_pop("height"),sd = sd_pop("height"))
summary(population)
summary(zombieData)
ggplot(zombieData,aes(Gender,Height)) + boxplot(zombieData$height)
ggplot(femaleZombieData,aes("Gender","Height")) + boxplot(zombieData$height )
ggplot(femaleZombieData,aes(x = "Gender",y = "Height")) + boxplot(femaleZombieData$height )
ggplot(femaleZombieData,aes(x = "Gender",y = "Height"))
ggplot(aes(x = "Gender",y = "Height"))
ggplot(femaleZombieData,aes(x = "Gender",y = "Height"))
ggplot(femaleZombieData,aes(x = "Gender",y = "Height")) + boxplot(femaleZombieData$height)
ggplot(femaleZombieData,aes(x = "Gender",y = "Height")) + boxplot(femaleZombieData$height, na.rm=TRUE)
ggplot(zombieData,aes(x = "Gender",y = "Height")) + boxplot(zombieData$height, na.rm=TRUE)
boxplot(zombieData$height, na.rm=TRUE)
library(ggplot2)
p<- ggplot(femaleZombieData,aes(x = "Gender",y = "Height"))
p <- p+ geom_boxplot()
p
?geom_boxplot
p<- ggplot(femaleZombieData,aes(x = "gender",y = "height"))
p
p<- ggplot(data = zombieData,aes(x = "gender",y = "height"))
p<- ggplot(data = zombieData,aes(x = "gender",y = "height"))
boxplot(height ~ gender, zombieData)
p <- ggplot(data = zombieData, aes(x = zombieData$gender, y = zombieData$height))
p
p <- p+ geom_boxplot()
p
p <- p+ geom_boxplot() + ylab("Height")
p
p <- p+ boxplot()
?geom_boxplot
p + geom_boxplot() + geom_jitter(width = 0.2)
?geom_boxplot
p + geom_boxplot() + coord_flip()
?geom_boxplot
p + geom_boxplot(varwidth = TRUE)
?geom_boxplot
p + geom_boxplot(fill = "white", colour = "#3366FF")
?geom_boxplot
p + geom_boxplot(outlier.colour = "red", outlier.shape = 1)
p + geom_boxplot(outlier.colour = "red", outlier.shape = 2)
?geom_boxplot
p + geom_boxplot(aes(colour = drv))
?geom_boxplot
p + geom_boxplot(notch = TRUE)
?geom_boxplot
p + geom_boxplot(notch = TRUE,color = "blue")
p + geom_boxplot(notch = TRUE,color = "grey")
p + geom_boxplot(color = "grey")
p + geom_boxplot(color = "white")
p + geom_boxplot(color = "black",fill="white")
p + geom_boxplot(color = "black",fill="grey")
?geom-boxplot
?geom_boxplot
p + geom_boxplot(color = "black",fill="grey",width = .1)
?geom_boxplot
p + geom_boxplot(color = "black",fill="grey",position = "dodge")
?position_dodge
?geom_boxplot
ggplot(zombieData,aes(gender,height)) + geom_boxplot(color = "black",fill = "grey", shape = 1 ) + ylab("Height") + xlab("Gender")
2
ggplot(zombieData,aes(gender,height)) + geom_boxplot(color = "black",fill = "grey", shape = 2 ) + ylab("Height") + xlab("Gender")
?plot
attach(zombieData)
ggplot(zombieData, aes(x = age,  y = weight)) + geom_point() + geom_smooth(method = "lm") +axis(side=1, at=seq(0,30, 2))
ggplot(zombieData, aes(x = age,  y = weight)) + geom_point() + geom_smooth(method = "lm") + axis(side=1, at=seq(0,30, 2))
?geom_point
?geom_smooth
ggplot(zombieData,aes(gender,height)) + geom_boxplot(color = "black",fill = "grey", shape = 1 ) + ylab("Height") + xlab("Gender") + xaxt = "n"
ggplot(zombieData,aes(gender,height)) + geom_boxplot(color = "black",fill = "grey", shape = 1 ) + ylab("Height") + xlab("Gender") + xaxt("n")
?xaxt
